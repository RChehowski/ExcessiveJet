//
// Created by ASUS on 31/12/2020.
//

#ifndef CPP20_OPCODES_H
#define CPP20_OPCODES_H

#include <array>
#include <vector>

#include "Util/Types.h"
#include "Util/ExcessiveAssert.h"

typedef void (*COpcodeHandler)();

namespace Bytecode
{
    class COpcode
    {
    public:
        constexpr COpcode() noexcept
            : ByteCode(-1)
            , Label("$Invalid")
            , Handler(nullptr)
        {
        }

        constexpr COpcode(const u1 InByteCode, const char *InLabel, COpcodeHandler InHandler) noexcept
            : ByteCode(InByteCode)
            , Label(InLabel)
            , Handler(InHandler)
        {
        }

        // disallow copy and move construction
        constexpr COpcode(const COpcode&) = delete;
        constexpr COpcode(COpcode&&) = delete;

        // disallow copy and move assignment
        constexpr COpcode& operator=(const COpcode&) = delete;
        constexpr COpcode& operator=(COpcode&&) = delete;

        [[nodiscard]]
        constexpr u1 GetByteCode() const
        {
            return ByteCode;
        }

        [[nodiscard]]
        constexpr const char* GetLabel() const
        {
            return Label;
        }

        void Execute(/* Execution context */) const
        {
            ASSERT_MSG(IsValid(), "Can not execute a null handler")
            Handler(/* Execution context */);
        }

        [[nodiscard]] bool IsValid() const
        {
            return Handler != nullptr;
        }

        [[nodiscard]] const COpcode& EnsureValid() const
        {
            ASSERT(IsValid());
            return *this;
        }

        static const COpcode& GetOpcodeForByte(u1 Byte);

        // Debug only. Copies opcode pointers
        static std::vector<const COpcode*> DEBUG_GetOpcodes(bool bRemoveInvalid = true);

    private:
        const u1 ByteCode;
        const char* const Label;
        COpcodeHandler Handler;
    };

    // Interpreter only
    namespace OpcodeHandlers
    {
#define DECLARE_OPCODE_HANDLER(Opcode) constexpr void Handle_##Opcode();

#pragma region Opcode handler declaration
        // 0 - 9
        DECLARE_OPCODE_HANDLER(NOP);
        DECLARE_OPCODE_HANDLER(ACONST_NULL);
        DECLARE_OPCODE_HANDLER(ICONST_M1);
        DECLARE_OPCODE_HANDLER(ICONST_0);
        DECLARE_OPCODE_HANDLER(ICONST_1);
        DECLARE_OPCODE_HANDLER(ICONST_2);
        DECLARE_OPCODE_HANDLER(ICONST_3);
        DECLARE_OPCODE_HANDLER(ICONST_4);
        DECLARE_OPCODE_HANDLER(ICONST_5);
        DECLARE_OPCODE_HANDLER(LCONST_0);

        // 10 - 19
        DECLARE_OPCODE_HANDLER(LCONST_1);
        DECLARE_OPCODE_HANDLER(FCONST_0);
        DECLARE_OPCODE_HANDLER(FCONST_1);
        DECLARE_OPCODE_HANDLER(FCONST_2);
        DECLARE_OPCODE_HANDLER(DCONST_0);
        DECLARE_OPCODE_HANDLER(DCONST_1);
        DECLARE_OPCODE_HANDLER(BIPUSH);
        DECLARE_OPCODE_HANDLER(SIPUSH);
        DECLARE_OPCODE_HANDLER(LDC);
        DECLARE_OPCODE_HANDLER(LDC_W);

        // 20 - 29
        DECLARE_OPCODE_HANDLER(LDC2_W);
        DECLARE_OPCODE_HANDLER(ILOAD);
        DECLARE_OPCODE_HANDLER(LLOAD);
        DECLARE_OPCODE_HANDLER(FLOAD);
        DECLARE_OPCODE_HANDLER(DLOAD);
        DECLARE_OPCODE_HANDLER(ALOAD);
        DECLARE_OPCODE_HANDLER(ILOAD_0);
        DECLARE_OPCODE_HANDLER(ILOAD_1);
        DECLARE_OPCODE_HANDLER(ILOAD_2);
        DECLARE_OPCODE_HANDLER(ILOAD_3)

        // 30 - 39
        DECLARE_OPCODE_HANDLER(LLOAD_0);
        DECLARE_OPCODE_HANDLER(LLOAD_1);
        DECLARE_OPCODE_HANDLER(LLOAD_2);
        DECLARE_OPCODE_HANDLER(LLOAD_3);
        DECLARE_OPCODE_HANDLER(FLOAD_0);
        DECLARE_OPCODE_HANDLER(FLOAD_1);
        DECLARE_OPCODE_HANDLER(FLOAD_2);
        DECLARE_OPCODE_HANDLER(FLOAD_3);
        DECLARE_OPCODE_HANDLER(DLOAD_0);
        DECLARE_OPCODE_HANDLER(DLOAD_1);

        // 40 - 49
        DECLARE_OPCODE_HANDLER(DLOAD_2);
        DECLARE_OPCODE_HANDLER(DLOAD_3);
        DECLARE_OPCODE_HANDLER(ALOAD_0);
        DECLARE_OPCODE_HANDLER(ALOAD_1);
        DECLARE_OPCODE_HANDLER(ALOAD_2);
        DECLARE_OPCODE_HANDLER(ALOAD_3);
        DECLARE_OPCODE_HANDLER(IALOAD);
        DECLARE_OPCODE_HANDLER(LALOAD);
        DECLARE_OPCODE_HANDLER(FALOAD);
        DECLARE_OPCODE_HANDLER(DALOAD);

        // 50 - 59
        DECLARE_OPCODE_HANDLER(AALOAD);
        DECLARE_OPCODE_HANDLER(BALOAD);
        DECLARE_OPCODE_HANDLER(CALOAD);
        DECLARE_OPCODE_HANDLER(SALOAD);
        DECLARE_OPCODE_HANDLER(ISTORE);
        DECLARE_OPCODE_HANDLER(LSTORE);
        DECLARE_OPCODE_HANDLER(FSTORE);
        DECLARE_OPCODE_HANDLER(DSTORE);
        DECLARE_OPCODE_HANDLER(ASTORE);
        DECLARE_OPCODE_HANDLER(ISTORE_0);

        // 60 - 69
        DECLARE_OPCODE_HANDLER(ISTORE_1);
        DECLARE_OPCODE_HANDLER(ISTORE_2);
        DECLARE_OPCODE_HANDLER(ISTORE_3);
        DECLARE_OPCODE_HANDLER(LSTORE_0);
        DECLARE_OPCODE_HANDLER(LSTORE_1);
        DECLARE_OPCODE_HANDLER(LSTORE_2);
        DECLARE_OPCODE_HANDLER(LSTORE_3);
        DECLARE_OPCODE_HANDLER(FSTORE_0);
        DECLARE_OPCODE_HANDLER(FSTORE_1);
        DECLARE_OPCODE_HANDLER(FSTORE_2);

        // 70 - 79
        DECLARE_OPCODE_HANDLER(FSTORE_3);
        DECLARE_OPCODE_HANDLER(DSTORE_0);
        DECLARE_OPCODE_HANDLER(DSTORE_1);
        DECLARE_OPCODE_HANDLER(DSTORE_2);
        DECLARE_OPCODE_HANDLER(DSTORE_3);
        DECLARE_OPCODE_HANDLER(ASTORE_0);
        DECLARE_OPCODE_HANDLER(ASTORE_1);
        DECLARE_OPCODE_HANDLER(ASTORE_2);
        DECLARE_OPCODE_HANDLER(ASTORE_3);
        DECLARE_OPCODE_HANDLER(IASTORE);

        // 80 - 89
        DECLARE_OPCODE_HANDLER(LASTORE);
        DECLARE_OPCODE_HANDLER(FASTORE);
        DECLARE_OPCODE_HANDLER(DASTORE);
        DECLARE_OPCODE_HANDLER(AASTORE);
        DECLARE_OPCODE_HANDLER(BASTORE);
        DECLARE_OPCODE_HANDLER(CASTORE);
        DECLARE_OPCODE_HANDLER(SASTORE);
        DECLARE_OPCODE_HANDLER(POP);
        DECLARE_OPCODE_HANDLER(POP2);
        DECLARE_OPCODE_HANDLER(DUP);

        // 90 - 99
        DECLARE_OPCODE_HANDLER(DUP_X1);
        DECLARE_OPCODE_HANDLER(DUP_X2);
        DECLARE_OPCODE_HANDLER(DUP2);
        DECLARE_OPCODE_HANDLER(DUP2_X1);
        DECLARE_OPCODE_HANDLER(DUP2_X2);
        DECLARE_OPCODE_HANDLER(SWAP);
        DECLARE_OPCODE_HANDLER(IADD);
        DECLARE_OPCODE_HANDLER(LADD);
        DECLARE_OPCODE_HANDLER(FADD);
        DECLARE_OPCODE_HANDLER(DADD);

        // 100 - 109
        DECLARE_OPCODE_HANDLER(ISUB);
        DECLARE_OPCODE_HANDLER(LSUB);
        DECLARE_OPCODE_HANDLER(FSUB);
        DECLARE_OPCODE_HANDLER(DSUB);
        DECLARE_OPCODE_HANDLER(IMUL);
        DECLARE_OPCODE_HANDLER(LMUL);
        DECLARE_OPCODE_HANDLER(FMUL);
        DECLARE_OPCODE_HANDLER(DMUL);
        DECLARE_OPCODE_HANDLER(IDIV);
        DECLARE_OPCODE_HANDLER(LDIV);

        // 110 - 119
        DECLARE_OPCODE_HANDLER(FDIV);
        DECLARE_OPCODE_HANDLER(DDIV);
        DECLARE_OPCODE_HANDLER(IREM);
        DECLARE_OPCODE_HANDLER(LREM);
        DECLARE_OPCODE_HANDLER(FREM);
        DECLARE_OPCODE_HANDLER(DREM);
        DECLARE_OPCODE_HANDLER(INEG);
        DECLARE_OPCODE_HANDLER(LNEG);
        DECLARE_OPCODE_HANDLER(FNEG);
        DECLARE_OPCODE_HANDLER(DNEG);

        // 120 - 129
        DECLARE_OPCODE_HANDLER(ISHL);
        DECLARE_OPCODE_HANDLER(LSHL);
        DECLARE_OPCODE_HANDLER(ISHR);
        DECLARE_OPCODE_HANDLER(LSHR);
        DECLARE_OPCODE_HANDLER(IUSHR);
        DECLARE_OPCODE_HANDLER(LUSHR);
        DECLARE_OPCODE_HANDLER(IAND);
        DECLARE_OPCODE_HANDLER(LAND);
        DECLARE_OPCODE_HANDLER(IOR);
        DECLARE_OPCODE_HANDLER(LOR);

        // 130 - 139
        DECLARE_OPCODE_HANDLER(IXOR);
        DECLARE_OPCODE_HANDLER(LXOR);
        DECLARE_OPCODE_HANDLER(IINC);
        DECLARE_OPCODE_HANDLER(I2L);
        DECLARE_OPCODE_HANDLER(I2F);
        DECLARE_OPCODE_HANDLER(I2D);
        DECLARE_OPCODE_HANDLER(L2I);
        DECLARE_OPCODE_HANDLER(L2F);
        DECLARE_OPCODE_HANDLER(L2D);
        DECLARE_OPCODE_HANDLER(F2I);

        // 140 - 149
        DECLARE_OPCODE_HANDLER(F2L);
        DECLARE_OPCODE_HANDLER(F2D);
        DECLARE_OPCODE_HANDLER(D2I);
        DECLARE_OPCODE_HANDLER(D2L);
        DECLARE_OPCODE_HANDLER(D2F);
        DECLARE_OPCODE_HANDLER(I2B);
        DECLARE_OPCODE_HANDLER(I2C);
        DECLARE_OPCODE_HANDLER(I2S);
        DECLARE_OPCODE_HANDLER(LCMP);
        DECLARE_OPCODE_HANDLER(FCMPL);

        // 150 - 159
        DECLARE_OPCODE_HANDLER(FCMPG);
        DECLARE_OPCODE_HANDLER(DCMPL);
        DECLARE_OPCODE_HANDLER(DCMPG);
        DECLARE_OPCODE_HANDLER(IFEQ);
        DECLARE_OPCODE_HANDLER(IFNE);
        DECLARE_OPCODE_HANDLER(IFLT);
        DECLARE_OPCODE_HANDLER(IFGE);
        DECLARE_OPCODE_HANDLER(IFGT);
        DECLARE_OPCODE_HANDLER(IFLE);
        DECLARE_OPCODE_HANDLER(IF_ICMPEQ);

        // 160 - 169
        DECLARE_OPCODE_HANDLER(IF_ICMPNE);
        DECLARE_OPCODE_HANDLER(IF_ICMPLT);
        DECLARE_OPCODE_HANDLER(IF_ICMPGE);
        DECLARE_OPCODE_HANDLER(IF_ICMPGT);
        DECLARE_OPCODE_HANDLER(IF_ICMPLE);
        DECLARE_OPCODE_HANDLER(IF_ACMPEQ);
        DECLARE_OPCODE_HANDLER(IF_ACMPNE);
        DECLARE_OPCODE_HANDLER(GOTO);
        DECLARE_OPCODE_HANDLER(JSR);
        DECLARE_OPCODE_HANDLER(RET);

        // 170 - 179
        DECLARE_OPCODE_HANDLER(TABLESWITCH);
        DECLARE_OPCODE_HANDLER(LOOKUPSWITCH);
        DECLARE_OPCODE_HANDLER(IRETURN);
        DECLARE_OPCODE_HANDLER(LRETURN);
        DECLARE_OPCODE_HANDLER(FRETURN);
        DECLARE_OPCODE_HANDLER(DRETURN);
        DECLARE_OPCODE_HANDLER(ARETURN);
        DECLARE_OPCODE_HANDLER(RETURN);
        DECLARE_OPCODE_HANDLER(GETSTATIC);
        DECLARE_OPCODE_HANDLER(PUTSTATIC);

        // 180 - 189
        DECLARE_OPCODE_HANDLER(GETFIELD);
        DECLARE_OPCODE_HANDLER(PUTFIELD);
        DECLARE_OPCODE_HANDLER(INVOKEVIRTUAL);
        DECLARE_OPCODE_HANDLER(INVOKESPECIAL);
        DECLARE_OPCODE_HANDLER(INVOKESTATIC);
        DECLARE_OPCODE_HANDLER(INVOKEINTERFACE);
        DECLARE_OPCODE_HANDLER(INVOKEDYNAMIC);
        DECLARE_OPCODE_HANDLER(NEW);
        DECLARE_OPCODE_HANDLER(NEWARRAY);
        DECLARE_OPCODE_HANDLER(ANEWARRAY);

        // 190 - 199
        DECLARE_OPCODE_HANDLER(ARRAYLENGTH);
        DECLARE_OPCODE_HANDLER(ATHROW);
        DECLARE_OPCODE_HANDLER(CHECKCAST);
        DECLARE_OPCODE_HANDLER(INSTANCEOF);
        DECLARE_OPCODE_HANDLER(MONITORENTER);
        DECLARE_OPCODE_HANDLER(MONITOREXIT);
        DECLARE_OPCODE_HANDLER(WIDE);
        DECLARE_OPCODE_HANDLER(MULTIANEWARRAY);
        DECLARE_OPCODE_HANDLER(IFNULL);
        DECLARE_OPCODE_HANDLER(IFNONNULL);

        // 200 - 201
        DECLARE_OPCODE_HANDLER(GOTO_W);
        DECLARE_OPCODE_HANDLER(JSR_W);
#pragma endregion // Opcode handler declaration

#undef DECLARE_OPCODE_HANDLER
    }
}

#endif //CPP20_OPCODES_H
