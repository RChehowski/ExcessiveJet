//
// Created by ASUS on 31/12/2020.
//

#include "Bytecode/Opcodes.h"

#include <algorithm>


namespace Bytecode::OpcodeHandlers
{
#define DEFINE_OPCODE_HANDLER(Opcode) constexpr void Handle_##Opcode()

#pragma region Opcode handler definition
    // 0 - 9
    DEFINE_OPCODE_HANDLER(NOP)
    {
        // Deliberately do nothing
    }
    DEFINE_OPCODE_HANDLER(ACONST_NULL)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_M1)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_0)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_1)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_2)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_3)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_4)
    {
    }
    DEFINE_OPCODE_HANDLER(ICONST_5)
    {
    }
    DEFINE_OPCODE_HANDLER(LCONST_0)
    {
    }

    // 10 - 19
    DEFINE_OPCODE_HANDLER(LCONST_1)
    {
    }
    DEFINE_OPCODE_HANDLER(FCONST_0)
    {
    }
    DEFINE_OPCODE_HANDLER(FCONST_1)
    {
    }
    DEFINE_OPCODE_HANDLER(FCONST_2)
    {
    }
    DEFINE_OPCODE_HANDLER(DCONST_0)
    {
    }
    DEFINE_OPCODE_HANDLER(DCONST_1)
    {
    }
    DEFINE_OPCODE_HANDLER(BIPUSH)
    {
    }
    DEFINE_OPCODE_HANDLER(SIPUSH)
    {
    }
    DEFINE_OPCODE_HANDLER(LDC)
    {
    }
    DEFINE_OPCODE_HANDLER(LDC_W)
    {
    }

    // 20 - 29
    DEFINE_OPCODE_HANDLER(LDC2_W)
    {
    }
    DEFINE_OPCODE_HANDLER(ILOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(LLOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(FLOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(DLOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(ALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(ILOAD_0)
    {
    }
    DEFINE_OPCODE_HANDLER(ILOAD_1)
    {
    }
    DEFINE_OPCODE_HANDLER(ILOAD_2)
    {
    }
    DEFINE_OPCODE_HANDLER(ILOAD_3)
    {
    }

    // 30 - 39
    DEFINE_OPCODE_HANDLER(LLOAD_0)
    {
    }
    DEFINE_OPCODE_HANDLER(LLOAD_1)
    {
    }
    DEFINE_OPCODE_HANDLER(LLOAD_2)
    {
    }
    DEFINE_OPCODE_HANDLER(LLOAD_3)
    {
    }
    DEFINE_OPCODE_HANDLER(FLOAD_0)
    {
    }
    DEFINE_OPCODE_HANDLER(FLOAD_1)
    {
    }
    DEFINE_OPCODE_HANDLER(FLOAD_2)
    {
    }
    DEFINE_OPCODE_HANDLER(FLOAD_3)
    {
    }
    DEFINE_OPCODE_HANDLER(DLOAD_0)
    {
    }
    DEFINE_OPCODE_HANDLER(DLOAD_1)
    {
    }

    // 40 - 49
    DEFINE_OPCODE_HANDLER(DLOAD_2)
    {
    }
    DEFINE_OPCODE_HANDLER(DLOAD_3)
    {
    }
    DEFINE_OPCODE_HANDLER(ALOAD_0)
    {
    }
    DEFINE_OPCODE_HANDLER(ALOAD_1)
    {
    }
    DEFINE_OPCODE_HANDLER(ALOAD_2)
    {
    }
    DEFINE_OPCODE_HANDLER(ALOAD_3)
    {
    }
    DEFINE_OPCODE_HANDLER(IALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(LALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(FALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(DALOAD)
    {
    }

    // 50 - 59
    DEFINE_OPCODE_HANDLER(AALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(BALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(CALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(SALOAD)
    {
    }
    DEFINE_OPCODE_HANDLER(ISTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(LSTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(FSTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(DSTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(ASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(ISTORE_0)
    {
    }

    // 60 - 69
    DEFINE_OPCODE_HANDLER(ISTORE_1)
    {
    }
    DEFINE_OPCODE_HANDLER(ISTORE_2)
    {
    }
    DEFINE_OPCODE_HANDLER(ISTORE_3)
    {
    }
    DEFINE_OPCODE_HANDLER(LSTORE_0)
    {
    }
    DEFINE_OPCODE_HANDLER(LSTORE_1)
    {
    }
    DEFINE_OPCODE_HANDLER(LSTORE_2)
    {
    }
    DEFINE_OPCODE_HANDLER(LSTORE_3)
    {
    }
    DEFINE_OPCODE_HANDLER(FSTORE_0)
    {
    }
    DEFINE_OPCODE_HANDLER(FSTORE_1)
    {
    }
    DEFINE_OPCODE_HANDLER(FSTORE_2)
    {
    }

    // 70 - 79
    DEFINE_OPCODE_HANDLER(FSTORE_3)
    {
    }
    DEFINE_OPCODE_HANDLER(DSTORE_0)
    {
    }
    DEFINE_OPCODE_HANDLER(DSTORE_1)
    {
    }
    DEFINE_OPCODE_HANDLER(DSTORE_2)
    {
    }
    DEFINE_OPCODE_HANDLER(DSTORE_3)
    {
    }
    DEFINE_OPCODE_HANDLER(ASTORE_0)
    {
    }
    DEFINE_OPCODE_HANDLER(ASTORE_1)
    {
    }
    DEFINE_OPCODE_HANDLER(ASTORE_2)
    {
    }
    DEFINE_OPCODE_HANDLER(ASTORE_3)
    {
    }
    DEFINE_OPCODE_HANDLER(IASTORE)
    {
    }

    // 80 - 89
    DEFINE_OPCODE_HANDLER(LASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(FASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(DASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(AASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(BASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(CASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(SASTORE)
    {
    }
    DEFINE_OPCODE_HANDLER(POP)
    {
    }
    DEFINE_OPCODE_HANDLER(POP2)
    {
    }
    DEFINE_OPCODE_HANDLER(DUP)
    {
    }

    // 90 - 99
    DEFINE_OPCODE_HANDLER(DUP_X1)
    {
    }
    DEFINE_OPCODE_HANDLER(DUP_X2)
    {
    }
    DEFINE_OPCODE_HANDLER(DUP2)
    {
    }
    DEFINE_OPCODE_HANDLER(DUP2_X1)
    {
    }
    DEFINE_OPCODE_HANDLER(DUP2_X2)
    {
    }
    DEFINE_OPCODE_HANDLER(SWAP)
    {
    }
    DEFINE_OPCODE_HANDLER(IADD)
    {
    }
    DEFINE_OPCODE_HANDLER(LADD)
    {
    }
    DEFINE_OPCODE_HANDLER(FADD)
    {
    }
    DEFINE_OPCODE_HANDLER(DADD)
    {
    }

    // 100 - 109
    DEFINE_OPCODE_HANDLER(ISUB)
    {
    }
    DEFINE_OPCODE_HANDLER(LSUB)
    {
    }
    DEFINE_OPCODE_HANDLER(FSUB)
    {
    }
    DEFINE_OPCODE_HANDLER(DSUB)
    {
    }
    DEFINE_OPCODE_HANDLER(IMUL)
    {
    }
    DEFINE_OPCODE_HANDLER(LMUL)
    {
    }
    DEFINE_OPCODE_HANDLER(FMUL)
    {
    }
    DEFINE_OPCODE_HANDLER(DMUL)
    {
    }
    DEFINE_OPCODE_HANDLER(IDIV)
    {
    }
    DEFINE_OPCODE_HANDLER(LDIV)
    {
    }

    // 110 - 119
    DEFINE_OPCODE_HANDLER(FDIV)
    {
    }
    DEFINE_OPCODE_HANDLER(DDIV)
    {
    }
    DEFINE_OPCODE_HANDLER(IREM)
    {
    }
    DEFINE_OPCODE_HANDLER(LREM)
    {
    }
    DEFINE_OPCODE_HANDLER(FREM)
    {
    }
    DEFINE_OPCODE_HANDLER(DREM)
    {
    }
    DEFINE_OPCODE_HANDLER(INEG)
    {
    }
    DEFINE_OPCODE_HANDLER(LNEG)
    {
    }
    DEFINE_OPCODE_HANDLER(FNEG)
    {
    }
    DEFINE_OPCODE_HANDLER(DNEG)
    {
    }

    // 120 - 129
    DEFINE_OPCODE_HANDLER(ISHL)
    {
    }
    DEFINE_OPCODE_HANDLER(LSHL)
    {
    }
    DEFINE_OPCODE_HANDLER(ISHR)
    {
    }
    DEFINE_OPCODE_HANDLER(LSHR)
    {
    }
    DEFINE_OPCODE_HANDLER(IUSHR)
    {
    }
    DEFINE_OPCODE_HANDLER(LUSHR)
    {
    }
    DEFINE_OPCODE_HANDLER(IAND)
    {
    }
    DEFINE_OPCODE_HANDLER(LAND)
    {
    }
    DEFINE_OPCODE_HANDLER(IOR)
    {
    }
    DEFINE_OPCODE_HANDLER(LOR)
    {
    }

    // 130 - 139
    DEFINE_OPCODE_HANDLER(IXOR)
    {
    }
    DEFINE_OPCODE_HANDLER(LXOR)
    {
    }
    DEFINE_OPCODE_HANDLER(IINC)
    {
    }
    DEFINE_OPCODE_HANDLER(I2L)
    {
    }
    DEFINE_OPCODE_HANDLER(I2F)
    {
    }
    DEFINE_OPCODE_HANDLER(I2D)
    {
    }
    DEFINE_OPCODE_HANDLER(L2I)
    {
    }
    DEFINE_OPCODE_HANDLER(L2F)
    {
    }
    DEFINE_OPCODE_HANDLER(L2D)
    {
    }
    DEFINE_OPCODE_HANDLER(F2I)
    {
    }

    // 140 - 149
    DEFINE_OPCODE_HANDLER(F2L)
    {
    }
    DEFINE_OPCODE_HANDLER(F2D)
    {
    }
    DEFINE_OPCODE_HANDLER(D2I)
    {
    }
    DEFINE_OPCODE_HANDLER(D2L)
    {
    }
    DEFINE_OPCODE_HANDLER(D2F)
    {
    }
    DEFINE_OPCODE_HANDLER(I2B)
    {
    }
    DEFINE_OPCODE_HANDLER(I2C)
    {
    }
    DEFINE_OPCODE_HANDLER(I2S)
    {
    }
    DEFINE_OPCODE_HANDLER(LCMP)
    {
    }
    DEFINE_OPCODE_HANDLER(FCMPL)
    {
    }

    // 150 - 159
    DEFINE_OPCODE_HANDLER(FCMPG)
    {
    }
    DEFINE_OPCODE_HANDLER(DCMPL)
    {
    }
    DEFINE_OPCODE_HANDLER(DCMPG)
    {
    }
    DEFINE_OPCODE_HANDLER(IFEQ)
    {
    }
    DEFINE_OPCODE_HANDLER(IFNE)
    {
    }
    DEFINE_OPCODE_HANDLER(IFLT)
    {
    }
    DEFINE_OPCODE_HANDLER(IFGE)
    {
    }
    DEFINE_OPCODE_HANDLER(IFGT)
    {
    }
    DEFINE_OPCODE_HANDLER(IFLE)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ICMPEQ)
    {
    }

    // 160 - 169
    DEFINE_OPCODE_HANDLER(IF_ICMPNE)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ICMPLT)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ICMPGE)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ICMPGT)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ICMPLE)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ACMPEQ)
    {
    }
    DEFINE_OPCODE_HANDLER(IF_ACMPNE)
    {
    }
    DEFINE_OPCODE_HANDLER(GOTO)
    {
    }
    DEFINE_OPCODE_HANDLER(JSR)
    {
    }
    DEFINE_OPCODE_HANDLER(RET)
    {
    }

    // 170 - 179
    DEFINE_OPCODE_HANDLER(TABLESWITCH)
    {
    }
    DEFINE_OPCODE_HANDLER(LOOKUPSWITCH)
    {
    }
    DEFINE_OPCODE_HANDLER(IRETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(LRETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(FRETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(DRETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(ARETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(RETURN)
    {
    }
    DEFINE_OPCODE_HANDLER(GETSTATIC)
    {
    }
    DEFINE_OPCODE_HANDLER(PUTSTATIC)
    {
    }

    // 180 - 189
    DEFINE_OPCODE_HANDLER(GETFIELD)
    {
    }
    DEFINE_OPCODE_HANDLER(PUTFIELD)
    {
    }
    DEFINE_OPCODE_HANDLER(INVOKEVIRTUAL)
    {
    }
    DEFINE_OPCODE_HANDLER(INVOKESPECIAL)
    {
    }
    DEFINE_OPCODE_HANDLER(INVOKESTATIC)
    {
    }
    DEFINE_OPCODE_HANDLER(INVOKEINTERFACE)
    {
    }
    DEFINE_OPCODE_HANDLER(INVOKEDYNAMIC)
    {
    }
    DEFINE_OPCODE_HANDLER(NEW)
    {
    }
    DEFINE_OPCODE_HANDLER(NEWARRAY)
    {
    }
    DEFINE_OPCODE_HANDLER(ANEWARRAY)
    {
    }

    // 190 - 199
    DEFINE_OPCODE_HANDLER(ARRAYLENGTH)
    {
    }
    DEFINE_OPCODE_HANDLER(ATHROW)
    {
    }
    DEFINE_OPCODE_HANDLER(CHECKCAST)
    {
    }
    DEFINE_OPCODE_HANDLER(INSTANCEOF)
    {
    }
    DEFINE_OPCODE_HANDLER(MONITORENTER)
    {
    }
    DEFINE_OPCODE_HANDLER(MONITOREXIT)
    {
    }
    DEFINE_OPCODE_HANDLER(WIDE)
    {
    }
    DEFINE_OPCODE_HANDLER(MULTIANEWARRAY)
    {
    }
    DEFINE_OPCODE_HANDLER(IFNULL)
    {
    }
    DEFINE_OPCODE_HANDLER(IFNONNULL)
    {
    }

    // 200 - 201
    DEFINE_OPCODE_HANDLER(GOTO_W)
    {
    }
    DEFINE_OPCODE_HANDLER(JSR_W)
    {
    }
#pragma endregion // Opcode handler definition

#undef DEFINE_OPCODE_HANDLER
}

#define DEFINE_OPCODE(Byte, Name) COpcode\
{\
    static_cast<u1>(Byte),\
    LITERAL_TO_STRING(Name),\
    OpcodeHandlers::Handle_##Name\
}


namespace Bytecode
{
#pragma region Opcode array
    constexpr std::array<COpcode, 256> _OpcodesArray
    {
        // 0 - 9
        DEFINE_OPCODE(0, NOP),
        DEFINE_OPCODE(1, ACONST_NULL),
        DEFINE_OPCODE(2, ICONST_M1),
        DEFINE_OPCODE(3, ICONST_0),
        DEFINE_OPCODE(4, ICONST_1),
        DEFINE_OPCODE(5, ICONST_2),
        DEFINE_OPCODE(6, ICONST_3),
        DEFINE_OPCODE(7, ICONST_4),
        DEFINE_OPCODE(8, ICONST_5),
        DEFINE_OPCODE(9, LCONST_0),

        // 10 - 19
        DEFINE_OPCODE(10, LCONST_1),
        DEFINE_OPCODE(11, FCONST_0),
        DEFINE_OPCODE(12, FCONST_1),
        DEFINE_OPCODE(13, FCONST_2),
        DEFINE_OPCODE(14, DCONST_0),
        DEFINE_OPCODE(15, DCONST_1),
        DEFINE_OPCODE(16, BIPUSH),
        DEFINE_OPCODE(17, SIPUSH),
        DEFINE_OPCODE(18, LDC),
        DEFINE_OPCODE(19, LDC_W),

        // 20 - 29
        DEFINE_OPCODE(20, LDC2_W),
        DEFINE_OPCODE(21, ILOAD),
        DEFINE_OPCODE(22, LLOAD),
        DEFINE_OPCODE(23, FLOAD),
        DEFINE_OPCODE(24, DLOAD),
        DEFINE_OPCODE(25, ALOAD),
        DEFINE_OPCODE(26, ILOAD_0),
        DEFINE_OPCODE(27, ILOAD_1),
        DEFINE_OPCODE(28, ILOAD_2),
        DEFINE_OPCODE(29, ILOAD_3),

        // 30 - 39
        DEFINE_OPCODE(30, LLOAD_0),
        DEFINE_OPCODE(31, LLOAD_1),
        DEFINE_OPCODE(32, LLOAD_2),
        DEFINE_OPCODE(33, LLOAD_3),
        DEFINE_OPCODE(34, FLOAD_0),
        DEFINE_OPCODE(35, FLOAD_1),
        DEFINE_OPCODE(36, FLOAD_2),
        DEFINE_OPCODE(37, FLOAD_3),
        DEFINE_OPCODE(38, DLOAD_0),
        DEFINE_OPCODE(39, DLOAD_1),

        // 40 - 49
        DEFINE_OPCODE(40, DLOAD_2),
        DEFINE_OPCODE(41, DLOAD_3),
        DEFINE_OPCODE(42, ALOAD_0),
        DEFINE_OPCODE(43, ALOAD_1),
        DEFINE_OPCODE(44, ALOAD_2),
        DEFINE_OPCODE(45, ALOAD_3),
        DEFINE_OPCODE(46, IALOAD),
        DEFINE_OPCODE(47, LALOAD),
        DEFINE_OPCODE(48, FALOAD),
        DEFINE_OPCODE(49, DALOAD),

        // 50 - 59
        DEFINE_OPCODE(50, AALOAD),
        DEFINE_OPCODE(51, BALOAD),
        DEFINE_OPCODE(52, CALOAD),
        DEFINE_OPCODE(53, SALOAD),
        DEFINE_OPCODE(54, ISTORE),
        DEFINE_OPCODE(55, LSTORE),
        DEFINE_OPCODE(56, FSTORE),
        DEFINE_OPCODE(57, DSTORE),
        DEFINE_OPCODE(58, ASTORE),
        DEFINE_OPCODE(59, ISTORE_0),

        // 60 - 69
        DEFINE_OPCODE(60, ISTORE_1),
        DEFINE_OPCODE(61, ISTORE_2),
        DEFINE_OPCODE(62, ISTORE_3),
        DEFINE_OPCODE(63, LSTORE_0),
        DEFINE_OPCODE(64, LSTORE_1),
        DEFINE_OPCODE(65, LSTORE_2),
        DEFINE_OPCODE(66, LSTORE_3),
        DEFINE_OPCODE(67, FSTORE_0),
        DEFINE_OPCODE(68, FSTORE_1),
        DEFINE_OPCODE(69, FSTORE_2),

        // 70 - 79
        DEFINE_OPCODE(70, FSTORE_3),
        DEFINE_OPCODE(71, DSTORE_0),
        DEFINE_OPCODE(72, DSTORE_1),
        DEFINE_OPCODE(73, DSTORE_2),
        DEFINE_OPCODE(74, DSTORE_3),
        DEFINE_OPCODE(75, ASTORE_0),
        DEFINE_OPCODE(76, ASTORE_1),
        DEFINE_OPCODE(77, ASTORE_2),
        DEFINE_OPCODE(78, ASTORE_3),
        DEFINE_OPCODE(79, IASTORE),

        // 80 - 89
        DEFINE_OPCODE(80, LASTORE),
        DEFINE_OPCODE(81, FASTORE),
        DEFINE_OPCODE(82, DASTORE),
        DEFINE_OPCODE(83, AASTORE),
        DEFINE_OPCODE(84, BASTORE),
        DEFINE_OPCODE(85, CASTORE),
        DEFINE_OPCODE(86, SASTORE),
        DEFINE_OPCODE(87, POP),
        DEFINE_OPCODE(88, POP2),
        DEFINE_OPCODE(89, DUP),

        // 90 - 99
        DEFINE_OPCODE(90, DUP_X1),
        DEFINE_OPCODE(91, DUP_X2),
        DEFINE_OPCODE(92, DUP2),
        DEFINE_OPCODE(93, DUP2_X1),
        DEFINE_OPCODE(94, DUP2_X2),
        DEFINE_OPCODE(95, SWAP),
        DEFINE_OPCODE(96, IADD),
        DEFINE_OPCODE(97, LADD),
        DEFINE_OPCODE(98, FADD),
        DEFINE_OPCODE(99, DADD),

        // 100 - 109
        DEFINE_OPCODE(100, ISUB),
        DEFINE_OPCODE(101, LSUB),
        DEFINE_OPCODE(102, FSUB),
        DEFINE_OPCODE(103, DSUB),
        DEFINE_OPCODE(104, IMUL),
        DEFINE_OPCODE(105, LMUL),
        DEFINE_OPCODE(106, FMUL),
        DEFINE_OPCODE(107, DMUL),
        DEFINE_OPCODE(108, IDIV),
        DEFINE_OPCODE(109, LDIV),

        // 110 - 119
        DEFINE_OPCODE(110, FDIV),
        DEFINE_OPCODE(111, DDIV),
        DEFINE_OPCODE(112, IREM),
        DEFINE_OPCODE(113, LREM),
        DEFINE_OPCODE(114, FREM),
        DEFINE_OPCODE(115, DREM),
        DEFINE_OPCODE(116, INEG),
        DEFINE_OPCODE(117, LNEG),
        DEFINE_OPCODE(118, FNEG),
        DEFINE_OPCODE(119, DNEG),

        // 120 - 129
        DEFINE_OPCODE(120, ISHL),
        DEFINE_OPCODE(121, LSHL),
        DEFINE_OPCODE(122, ISHR),
        DEFINE_OPCODE(123, LSHR),
        DEFINE_OPCODE(124, IUSHR),
        DEFINE_OPCODE(125, LUSHR),
        DEFINE_OPCODE(126, IAND),
        DEFINE_OPCODE(127, LAND),
        DEFINE_OPCODE(128, IOR),
        DEFINE_OPCODE(129, LOR),

        // 130 - 139
        DEFINE_OPCODE(130, IXOR),
        DEFINE_OPCODE(131, LXOR),
        DEFINE_OPCODE(132, IINC),
        DEFINE_OPCODE(133, I2L),
        DEFINE_OPCODE(134, I2F),
        DEFINE_OPCODE(135, I2D),
        DEFINE_OPCODE(136, L2I),
        DEFINE_OPCODE(137, L2F),
        DEFINE_OPCODE(138, L2D),
        DEFINE_OPCODE(139, F2I),

        // 140 - 149
        DEFINE_OPCODE(140, F2L),
        DEFINE_OPCODE(141, F2D),
        DEFINE_OPCODE(142, D2I),
        DEFINE_OPCODE(143, D2L),
        DEFINE_OPCODE(144, D2F),
        DEFINE_OPCODE(145, I2B),
        DEFINE_OPCODE(146, I2C),
        DEFINE_OPCODE(147, I2S),
        DEFINE_OPCODE(148, LCMP),
        DEFINE_OPCODE(149, FCMPL),

        // 150 - 159
        DEFINE_OPCODE(150, FCMPG),
        DEFINE_OPCODE(151, DCMPL),
        DEFINE_OPCODE(152, DCMPG),
        DEFINE_OPCODE(153, IFEQ),
        DEFINE_OPCODE(154, IFNE),
        DEFINE_OPCODE(155, IFLT),
        DEFINE_OPCODE(156, IFGE),
        DEFINE_OPCODE(157, IFGT),
        DEFINE_OPCODE(158, IFLE),
        DEFINE_OPCODE(159, IF_ICMPEQ),

        // 160 - 169
        DEFINE_OPCODE(160, IF_ICMPNE),
        DEFINE_OPCODE(161, IF_ICMPLT),
        DEFINE_OPCODE(162, IF_ICMPGE),
        DEFINE_OPCODE(163, IF_ICMPGT),
        DEFINE_OPCODE(164, IF_ICMPLE),
        DEFINE_OPCODE(165, IF_ACMPEQ),
        DEFINE_OPCODE(166, IF_ACMPNE),
        DEFINE_OPCODE(167, GOTO),
        DEFINE_OPCODE(168, JSR),
        DEFINE_OPCODE(169, RET),

        // 170 - 179
        DEFINE_OPCODE(170, TABLESWITCH),
        DEFINE_OPCODE(171, LOOKUPSWITCH),
        DEFINE_OPCODE(172, IRETURN),
        DEFINE_OPCODE(173, LRETURN),
        DEFINE_OPCODE(174, FRETURN),
        DEFINE_OPCODE(175, DRETURN),
        DEFINE_OPCODE(176, ARETURN),
        DEFINE_OPCODE(177, RETURN),
        DEFINE_OPCODE(178, GETSTATIC),
        DEFINE_OPCODE(179, PUTSTATIC),

        // 180 - 189
        DEFINE_OPCODE(180, GETFIELD),
        DEFINE_OPCODE(181, PUTFIELD),
        DEFINE_OPCODE(182, INVOKEVIRTUAL),
        DEFINE_OPCODE(183, INVOKESPECIAL),
        DEFINE_OPCODE(184, INVOKESTATIC),
        DEFINE_OPCODE(185, INVOKEINTERFACE),
        DEFINE_OPCODE(186, INVOKEDYNAMIC),
        DEFINE_OPCODE(187, NEW),
        DEFINE_OPCODE(188, NEWARRAY),
        DEFINE_OPCODE(189, ANEWARRAY),

        // 190 - 199
        DEFINE_OPCODE(190, ARRAYLENGTH),
        DEFINE_OPCODE(191, ATHROW),
        DEFINE_OPCODE(192, CHECKCAST),
        DEFINE_OPCODE(193, INSTANCEOF),
        DEFINE_OPCODE(194, MONITORENTER),
        DEFINE_OPCODE(195, MONITOREXIT),
        DEFINE_OPCODE(196, WIDE),
        DEFINE_OPCODE(197, MULTIANEWARRAY),
        DEFINE_OPCODE(198, IFNULL),
        DEFINE_OPCODE(199, IFNONNULL),

        // 200 - 201
        DEFINE_OPCODE(200, GOTO_W),
        DEFINE_OPCODE(201, JSR_W)
    };
#pragma endregion // Opcode array

    const COpcode& COpcode::GetOpcodeForByte(const u1 Byte)
    {
        return _OpcodesArray[Byte].EnsureValid();
    }

    std::vector<const COpcode*> COpcode::DEBUG_GetOpcodes(bool bRemoveInvalid)
    {
        std::vector<const COpcode *> Opcodes{};
        Opcodes.reserve(_OpcodesArray.size());

        for (const COpcode& OpcodeRef: _OpcodesArray)
        {
            Opcodes.push_back(&OpcodeRef);
        }

        if (bRemoveInvalid)
        {
            Opcodes.erase
            (
                std::find_if(Opcodes.begin(), Opcodes.end(), [](const COpcode *Opcode)
                {
                    return !Opcode->IsValid();
                }),
                Opcodes.end()
            );
        }

        return Opcodes;
    }
}